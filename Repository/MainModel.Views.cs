//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(Repository.Entities),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets618258b6d421f505ff1b0dd75d2368a5060000d7b4043c5b011f827071761b50))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySets618258b6d421f505ff1b0dd75d2368a5060000d7b4043c5b011f827071761b50 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "618258b6d421f505ff1b0dd75d2368a5060000d7b4043c5b011f827071761b50"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "PerformanceTestModelStoreContainer.Customer")
            {
                return GetView0();
            }

            if (extentName == "PerformanceTestModelStoreContainer.CustomerResponsibleUser")
            {
                return GetView1();
            }

            if (extentName == "PerformanceTestModelStoreContainer.LoginUser")
            {
                return GetView2();
            }

            if (extentName == "PerformanceTestModelStoreContainer.Priority")
            {
                return GetView3();
            }

            if (extentName == "PerformanceTestModelStoreContainer.Region")
            {
                return GetView4();
            }

            if (extentName == "Entities.Customers")
            {
                return GetView5();
            }

            if (extentName == "Entities.CustomerResponsibleUsers")
            {
                return GetView6();
            }

            if (extentName == "Entities.LoginUsers")
            {
                return GetView7();
            }

            if (extentName == "Entities.Priorities")
            {
                return GetView8();
            }

            if (extentName == "Entities.Regions")
            {
                return GetView9();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for PerformanceTestModelStoreContainer.Customer.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Customer
        [PerformanceTestModel.Store.Customer](T1.Customer_Id, T1.Customer_Name, T1.Customer_RegionId, T1.Customer_PriorityId, T1.Customer_Type, T1.Customer_Cost, T1.Customer_Hours, T1.Customer_Address, T1.Customer_Phone)
    FROM (
        SELECT 
            T.Id AS Customer_Id, 
            T.Name AS Customer_Name, 
            T.RegionId AS Customer_RegionId, 
            T.PriorityId AS Customer_PriorityId, 
            T.Type AS Customer_Type, 
            T.Cost AS Customer_Cost, 
            T.Hours AS Customer_Hours, 
            T.Address AS Customer_Address, 
            T.Phone AS Customer_Phone, 
            True AS _from0
        FROM Entities.Customers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for PerformanceTestModelStoreContainer.CustomerResponsibleUser.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CustomerResponsibleUser
        [PerformanceTestModel.Store.CustomerResponsibleUser](T1.CustomerResponsibleUser_Id, T1.CustomerResponsibleUser_CustomerId, T1.CustomerResponsibleUser_UserId, T1.CustomerResponsibleUser_Cost, T1.CustomerResponsibleUser_Hours)
    FROM (
        SELECT 
            T.Id AS CustomerResponsibleUser_Id, 
            T.CustomerId AS CustomerResponsibleUser_CustomerId, 
            T.UserId AS CustomerResponsibleUser_UserId, 
            T.Cost AS CustomerResponsibleUser_Cost, 
            T.Hours AS CustomerResponsibleUser_Hours, 
            True AS _from0
        FROM Entities.CustomerResponsibleUsers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for PerformanceTestModelStoreContainer.LoginUser.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing LoginUser
        [PerformanceTestModel.Store.LoginUser](T1.LoginUser_Id, T1.LoginUser_Name, T1.LoginUser_IsEnabled, T1.LoginUser_HourlyWage, T1.LoginUser_JobTitle, T1.LoginUser_CompanyName)
    FROM (
        SELECT 
            T.Id AS LoginUser_Id, 
            T.Name AS LoginUser_Name, 
            T.IsEnabled AS LoginUser_IsEnabled, 
            T.HourlyWage AS LoginUser_HourlyWage, 
            T.JobTitle AS LoginUser_JobTitle, 
            T.CompanyName AS LoginUser_CompanyName, 
            True AS _from0
        FROM Entities.LoginUsers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for PerformanceTestModelStoreContainer.Priority.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Priority
        [PerformanceTestModel.Store.Priority](T1.Priority_Id, T1.Priority_Name)
    FROM (
        SELECT 
            T.Id AS Priority_Id, 
            T.Name AS Priority_Name, 
            True AS _from0
        FROM Entities.Priorities AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for PerformanceTestModelStoreContainer.Region.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Region
        [PerformanceTestModel.Store.Region](T1.Region_Id, T1.Region_Name)
    FROM (
        SELECT 
            T.Id AS Region_Id, 
            T.Name AS Region_Name, 
            True AS _from0
        FROM Entities.Regions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for Entities.Customers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Customers
        [PerformanceTestModel.Customer](T1.Customer_Id, T1.Customer_Name, T1.Customer_RegionId, T1.Customer_PriorityId, T1.Customer_Type, T1.Customer_Cost, T1.Customer_Hours, T1.Customer_Address, T1.Customer_Phone)
    FROM (
        SELECT 
            T.Id AS Customer_Id, 
            T.Name AS Customer_Name, 
            T.RegionId AS Customer_RegionId, 
            T.PriorityId AS Customer_PriorityId, 
            T.Type AS Customer_Type, 
            T.Cost AS Customer_Cost, 
            T.Hours AS Customer_Hours, 
            T.Address AS Customer_Address, 
            T.Phone AS Customer_Phone, 
            True AS _from0
        FROM PerformanceTestModelStoreContainer.Customer AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for Entities.CustomerResponsibleUsers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CustomerResponsibleUsers
        [PerformanceTestModel.CustomerResponsibleUser](T1.CustomerResponsibleUser_Id, T1.CustomerResponsibleUser_CustomerId, T1.CustomerResponsibleUser_UserId, T1.CustomerResponsibleUser_Cost, T1.CustomerResponsibleUser_Hours)
    FROM (
        SELECT 
            T.Id AS CustomerResponsibleUser_Id, 
            T.CustomerId AS CustomerResponsibleUser_CustomerId, 
            T.UserId AS CustomerResponsibleUser_UserId, 
            T.Cost AS CustomerResponsibleUser_Cost, 
            T.Hours AS CustomerResponsibleUser_Hours, 
            True AS _from0
        FROM PerformanceTestModelStoreContainer.CustomerResponsibleUser AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for Entities.LoginUsers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing LoginUsers
        [PerformanceTestModel.LoginUser](T1.LoginUser_Id, T1.LoginUser_Name, T1.LoginUser_IsEnabled, T1.LoginUser_HourlyWage, T1.LoginUser_JobTitle, T1.LoginUser_CompanyName)
    FROM (
        SELECT 
            T.Id AS LoginUser_Id, 
            T.Name AS LoginUser_Name, 
            T.IsEnabled AS LoginUser_IsEnabled, 
            T.HourlyWage AS LoginUser_HourlyWage, 
            T.JobTitle AS LoginUser_JobTitle, 
            T.CompanyName AS LoginUser_CompanyName, 
            True AS _from0
        FROM PerformanceTestModelStoreContainer.LoginUser AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for Entities.Priorities.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Priorities
        [PerformanceTestModel.Priority](T1.Priority_Id, T1.Priority_Name)
    FROM (
        SELECT 
            T.Id AS Priority_Id, 
            T.Name AS Priority_Name, 
            True AS _from0
        FROM PerformanceTestModelStoreContainer.Priority AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for Entities.Regions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Regions
        [PerformanceTestModel.Region](T1.Region_Id, T1.Region_Name)
    FROM (
        SELECT 
            T.Id AS Region_Id, 
            T.Name AS Region_Name, 
            True AS _from0
        FROM PerformanceTestModelStoreContainer.Region AS T
    ) AS T1");
        }
    }
}
